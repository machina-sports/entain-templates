workflow:
  name: "thread-executor"
  title: "Thread Executor"
  description: "Workflow to execute a thread."
  context-variables:
    debugger:
      enabled: true
    machina-ai:
      api_key: "$TEMP_CONTEXT_VARIABLE_SDK_OPENAI_API_KEY"
    tallysight:
      key: "$TEMP_CONTEXT_VARIABLE_TALLYSIGHT_API_KEY"
  inputs:
    event_type: "$.get('event_type', 'content-snippet')"
    input_status: "$.get('input_status', 'waiting')"
    output_status: "$.get('output_status', 'idle')"
  outputs:
    content: "$.get('content')"
    documents: "$.get('documents')"
    document_id: "$.get('document_id')"
    document_data: "$.get('document_data')"
    messages: "$.get('messages')"
    workflow-status: "$.get('content') is not None and 'executed' or 'skipped'"
  tasks:

    # Load pending thread
    - type: "document"
      name: "load-pending-thread"
      description: "Load pending thread"
      config:
        action: "search"
        search-limit: 1
        search-vector: false
      connector:
        name: "machina-ai"
        command: "invoke_embedding"
        model: "text-embedding-3-small"
      filters:
        name: "'thread'"
        value.status: "$.get('input_status')"
      outputs:
        document_id: "$.get('documents')[0]['_id'] if len($.get('documents', [])) > 0 else None"
        document_data: "$.get('documents')[0] if len($.get('documents', [])) > 0 else None"
        event_code: "$.get('documents')[0].get('metadata', {}).get('event_code', '') if len($.get('documents', [])) > 0 else None"
        messages: "$.get('documents')[0].get('value', {}).get('messages', []) if len($.get('documents', [])) > 0 else None"
        question: "$.get('documents')[0].get('value', {}).get('messages', [])[-1].get('content', '') if len($.get('documents', [])) > 0 else None"

    # Update thread status
    - type: "document"
      name: "update-thread-status"
      config:
        action: "update"
        embed-vector: false
        force-update: true
      condition: "$.get('document_id') is not None"
      connector:
        name: "machina-ai"
        command: "invoke_embedding"
        model: "text-embedding-3-small"
      documents:
        thread: |
          {
            **$.get('document_data', {}).get('value', {}),
            'status': 'processing'
          }
      filters:
        document_id: "$.get('document_id')"

    # Load similar documents
    - type: "document"
      name: "load-similar-documents"
      description: "Load similar documents"
      config:
        action: "search"
        # threshold-docs: 5
        # threshold-similarity: 0.01
        # search-limit: 162
        search-vector: false
      condition: "$.get('document_id') is not None"
      connector:
        name: "machina-ai"
        command: "invoke_embedding"
        model: "text-embedding-3-small"
      filters:
        metadata.event_code: "$.get('event_code')"
      inputs:
        name: "'content-snippet'"
        search-limit: "'50'"
        search-query: "$.get('question')"
      outputs:
        documents: "$.get('documents')"

    # chat-analysis-prompt
    - type: "prompt"
      name: "chat-analysis-prompt"
      description: "Chat Analysis."
      condition: "$.get('document_id') is not None"
      connector:
        name: "machina-ai"
        command: "invoke_prompt"
        model: "gpt-4.1"
      inputs:
        messages: "$.get('question')"
      outputs:
        is_faq_question: "$.get('is_faq_question')"
        is_match_question: "$.get('is_match_question')"
        is_betting_question: "$.get('is_betting_question')"
        is_odds_question: "$.get('is_odds_question')"
        is_other_question: "$.get('is_other_question')"
        is_player_question: "$.get('is_player_question')"
        is_team_question: "$.get('is_team_question')"
        player_name: "$.get('player_name')"
        team_name: "$.get('team_name')"

    # Load event by code
    - type: "document"
      name: "load-event-by-code"
      description: "Search event (sportradar) by code."
      condition: "$.get('document_id') is not None and $.get('event_code') is not None"
      config:
        action: "search"
        search-limit: 1
        search-vector: false
        search-sorters: ["start_time", 1]
      filters:
        metadata.event_code: "$.get('event_code')"
      inputs:
        name: "{'$in': ['nba-game', 'soccer-game']}"
      outputs:
        event_exists: "len($.get('documents', [])) > 0"
        event_selected: "$.get('documents')[0].get('value', {}) if $.get('documents') else None"
        event_type: "$.get('documents')[0].get('name') if $.get('documents') else None"
    
    # 2 sportradar-nba-event-mapping
    - type: "mapping"
      name: "sportradar-nba-event-mapping"
      description: "Transform the sportradar nba data"
      condition: "$.get('event_exists') is True and $.get('event_type') == 'nba-game'"
      inputs:
        event_selected: "$.get('event_selected')"
      outputs:
        event_code: "$.get('event_code')"
        odds_count: "$.get('research_odds_count')"
        team_home_name: "$.get('team_home_name')"
        team_away_name: "$.get('team_away_name')"
        team_home_id: "$.get('team_home_id')"
        team_away_id: "$.get('team_away_id')"
        title: "$.get('title')"

    # 3 sportradar-soccer-mapping
    - type: "mapping"
      name: "sportradar-soccer-mapping"
      description: "Transform the sportradar soccer data"
      condition: "$.get('event_exists') is True and $.get('event_type') == 'soccer-game'"
      inputs:
        event_selected: "$.get('event_selected')"
      outputs:
        competition_id: "$.get('competition_id')"
        competition_name: "$.get('competition_name')"
        day_before: "$.get('event_day_before')"
        event_code: "$.get('event_code')"
        event_date: "$.get('event_date')"
        odds_count: "$.get('research_odds_count')"
        team_home_name: "$.get('team_home_name')"
        team_away_name: "$.get('team_away_name')"
        team_home_id: "$.get('team_home_id')"
        team_away_id: "$.get('team_away_id')"
        title: "$.get('title')"

    # load site-leagues
    - type: "document"
      name: "load-site-leagues"
      description: "Search for registered site leagues."
      condition: "$.get('event_exists') is True and ($.get('is_odds_question') is True or $.get('is_betting_question') is True)"
      config:
        action: "search"
        search-limit: 1
        search-vector: false
      inputs:
        name: "'site-leagues'"
      outputs:
        result-site-leagues: "$.get('documents', [])[0].get('value', {}) if $.get('documents') else None"

    # 4 tallysight-leagues-mapping
    - type: "mapping"
      name: "tallysight-leagues-mapping"
      description: "Transform the tallysight leagues data"
      condition: "$.get('event_exists') is True and $.get('event_type') == 'soccer-game' and ($.get('is_odds_question') is True or $.get('is_betting_question') is True)"
      inputs:
        competition_id: "$.get('competition_id')"
        site_leagues: "$.get('result-site-leagues')"
      outputs:
        league_code: "$.get('league_code')"

    # 5 tallysight-load-match-embed
    - type: "connector"
      name: "tallysight-load-match-embed"
      description: "Load match embed from Tallysight"
      condition: "$.get('event_exists') is True and $.get('event_type') == 'soccer-game' and ($.get('is_odds_question') is True or $.get('is_betting_question') is True) and $.get('widget-match-embed') is None"
      continue_on_error: True
      connector:
        name: "tallysight"
        command: "get-api/v2/widgets/tiles/gamelines/leagues/{league}/matchup/{team1}/{team2}/{date}"
        command_attribute:
          league: "$.get('league_code')"
          team1: "$.get('team_home_name')"
          team2: "$.get('team_away_name')"
          date: "$.get('event_date')"
      outputs:
        widget-match-embed: "$"

    # 6 tallysight-load-match-embed-day-before
    - type: "connector"
      name: "tallysight-load-match-embed-day-before"
      description: "Load match embed from Tallysight"
      condition: "$.get('event_exists') is True and $.get('event_type') == 'soccer-game' and ($.get('is_odds_question') is True or $.get('is_betting_question') is True) and $.get('widget-match-embed') is None"
      connector:
        name: "tallysight"
        command: "get-api/v2/widgets/tiles/gamelines/leagues/{league}/matchup/{team1}/{team2}/{date}"
        command_attribute:
          league: "$.get('league_code')"
          team1: "$.get('team_home_name')"
          team2: "$.get('team_away_name')"
          date: "$.get('day_before')"
      outputs:
        widget-match-embed: "$"
        
    # Load faq documents
    - type: "document"
      name: "load-similar-documents"
      description: "Load similar documents"
      condition: "$.get('is_faq_question') is True"
      config:
        action: "search"
        threshold-docs: 5
        threshold-similarity: 0.01
        search-limit: 1000
        search-vector: true
      connector:
        name: "machina-ai"
        command: "invoke_embedding"
        model: "text-embedding-3-small"
      inputs:
        name: "'faq-snippet'"
        search-limit: "'1000'"
        search-query: "$.get('messages')"
      outputs:
        faq_documents: "$.get('documents')"

    # thread-executor-prompt
    - type: "prompt"
      name: "thread-executor-prompt"
      description: "Thread Executor."
      condition: "$.get('document_id') is not None"
      connector:
        # name: "machina-ai-fast"
        # command: "invoke_prompt"
        # model: "llama-3.3-70b-versatile"
        # model: "deepseek-r1-distill-qwen-32b"
        # model: "llama-3.1-8b-instant"
        # model: "llama-3.3-70b-versatile"
        # model: "deepseek-r1-distill-llama-70b"
        # model: "deepseek-r1-distill-llama-70b-specdec"
        name: "machina-ai"
        command: "invoke_prompt"
        model: "gpt-4.1"
      inputs:
        documents: |
          [
            *$.get('faq_documents', []),
            *$.get('documents', []),
          ]
        event_context: |
          [
            $.get('team_home_name'),
            $.get('team_away_name'),
            $.get('event_date'),
            $.get('competition_name'),
          ]
        instruction: "'Answer the users question based in the language of the question.'"
        messages: "$.get('messages')"
        question: "$.get('question')"
      outputs:
        content: "$"

    # Load thread document
    - type: "document"
      name: "load-thread-document"
      description: "Load thread document"
      config:
        action: "search"
        search-limit: 1
        search-vector: false
      condition: "$.get('document_id') is not None"
      connector:
        name: "machina-ai"
        command: "invoke_embedding"
        model: "text-embedding-3-small"
      filters:
        _id: "$.get('document_id')"
      inputs:
        name: "'thread'"
      outputs:
        document_data: "$.get('documents')[0]"
        messages: "$.get('documents')[0].get('value', {}).get('messages', [])"

    # Update thread document
    - type: "document"
      name: "update-thread-document"
      config:
        action: "update"
        embed-vector: false
        force-update: true
      condition: "$.get('document_id') is not None"
      connector:
        name: "machina-ai"
        command: "invoke_embedding"
        model: "text-embedding-3-small"
      documents:
        thread: |
          {
            **$.get('document_data').get('value', {}),
            'messages': [
              *$.get('messages'),
              {
                'role': 'assistant',
                'content': {
                  **$.get('content'),
                  'widget-match-embed': $.get('widget-match-embed')
                },
                'date': datetime.now().isoformat(),
              }
            ],
            'status': $.get('output_status')
          }
      filters:
        document_id: "$.get('document_id')"
