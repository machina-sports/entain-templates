workflow:
  name: "research-odds-nba"
  title: "Research Odds NBA"
  description: "Workflow to produce odds analysis."
  context-variables:
    bwin:
      Bwin-AccessId: "$TEMP_CONTEXT_VARIABLE_BWIN_ACCESS_ID"
      Bwin-AccessIdToken: "$TEMP_CONTEXT_VARIABLE_BWIN_ACCESS_ID_TOKEN"
    debugger:
      enabled: true
    machina-ai:
      api_key: "$TEMP_CONTEXT_VARIABLE_SDK_OPENAI_API_KEY"
    tallysight:
      key: "$TEMP_CONTEXT_VARIABLE_TALLYSIGHT_API_KEY"
  inputs:
    event_code: "$.get('event_code') or None"
  outputs:
    events: "$.get('events')"
    workflow-status: "$.get('selected-fixture-exists') is not True and ($.get('event_exists') is not True and 'skipped' or 'failed') or 'executed'"
  
  tasks:
    
    # 0 load-event-by-code
    - type: "document"
      name: "load-event-by-code"
      description: "Search event (sportradar) by code."
      condition: "$.get('event_code') is not None"
      config:
        action: "search"
        search-limit: 1
        search-vector: false
        search-sorters: ["start_time", 1]
      filters:
        metadata.event_code: "$.get('event_code')"
      inputs:
        name: "{'$in': ['nba-game']}"
      outputs:
        event_exists: "len($.get('documents', [])) > 0"
        event_selected: "$.get('documents')[0].get('value', {}) if $.get('documents') else None"
        event_type: "$.get('documents')[0].get('name') if $.get('documents') else None"

    # 1 load-event-by-schedule
    - type: "document"
      name: "load-event-by-schedule"
      description: "Search for schedule events (sportradar)."
      condition: "$.get('event_exists') is not True"
      config:
        action: "search"
        search-limit: 1
        search-vector: false
        search-sorters: ["start_time", 1]
      filters:
        value.start_time: "{'$gt': datetime.utcnow(), '$lt': datetime.utcnow() + timedelta(hours=24)}"
        value.version_control.processing: "{'$ne': True}"
        value.version_control.research_odds_status: "{'$exists': False}"
      inputs:
        name: "{'$in': ['nba-game']}"
      outputs:
        event_exists: "len($.get('documents', [])) > 0"
        event_selected: "$.get('documents')[0].get('value', {}) if $.get('documents') else None"
        event_type: "$.get('documents')[0].get('name') if $.get('documents') else None"

    # 2 sportradar-nba-event-mapping
    - type: "mapping"
      name: "sportradar-nba-event-mapping"
      description: "Transform the sportradar nba data"
      condition: "$.get('event_exists') is True"
      inputs:
        event_selected: "$.get('event_selected')"
      outputs:
        day_before: "$.get('event_day_before')"
        event_code: "$.get('event_code')"
        event_date: "$.get('event_date')"
        league_code: "'nba'"
        odds_count: "$.get('research_odds_count')"
        team_home_name: "$.get('team_home_name')"
        team_away_name: "$.get('team_away_name')"
        team_home_id: "$.get('team_home_id')"
        team_away_id: "$.get('team_away_id')"
        title: "$.get('title')"

    # 6 tallysight-load-match-embed
    - type: "connector"
      name: "tallysight-load-match-embed"
      description: "Load match embed from Tallysight"
      condition: "$.get('event_exists') is True"
      continue_on_error: True
      connector:
        name: "tallysight"
        command: "get-api/v2/widgets/tiles/gamelines/leagues/{league}/matchup/{team1}/{team2}/{date}"
        command_attribute:
          league: "'nba'"
          team1: "$.get('team_home_name')"
          team2: "$.get('team_away_name')"
          date: "$.get('event_date')"
      outputs:
        widget-match-embed: "$"

    # 7 tallysight-load-match-embed-day-before
    - type: "connector"
      name: "tallysight-load-match-embed-day-before"
      description: "Load match embed from Tallysight"
      condition: "$.get('event_exists') is True and $.get('widget-match-embed') is None"
      connector:
        name: "tallysight"
        command: "get-api/v2/widgets/tiles/gamelines/leagues/{league}/matchup/{team1}/{team2}/{date}"
        command_attribute:
          league: "'nba'"
          team1: "$.get('team_home_name')"
          team2: "$.get('team_away_name')"
          date: "$.get('day_before')"
      outputs:
        widget-match-embed: "$"

    # 9 version-control-update (nba-game)
    - type: "document"
      name: "version-control-update-nba-game"
      description: "Update the events document version control."
      condition: "$.get('event_exists') is True"
      config:
        action: "update"
        embed-vector: false
        force-update: true
      documents:
        nba-game: |
          {
            **$.get('event_selected'),
            'version_control': {
              **$.get('event_selected').get('version_control', {}),
              'processing': True,
              'research_odds_status': 'processing'
            }
          }
      metadata:
        event_code: "$.get('event_code')"

    # 10 load-fixture-by-similarity
    - type: "document"
      name: "load-fixture-by-similarity"
      description: "Load fixture (from sportingbet) by title similarity."
      config:
        action: "search"
        threshold-docs: 1
        threshold-similarity: 0.10
        search-limit: 100
        search-vector: true
      condition: "$.get('event_exists') is True"
      connector:
        name: "machina-ai"
        command: "invoke_embedding"
        model: "text-embedding-3-small"
      inputs:
        name: "'game-fixture'"
        search-limit: "'100'"
        search-query: "$.get('title')"
      outputs:
        selected-fixture: "$.get('documents')[0].get('value', {}) if $.get('documents') else None"
        selected-fixture-exists: "len($.get('documents', [])) > 0"
        selected-fixture-title: "$.get('documents')[0].get('value', {}).get('title') if $.get('documents') else None"
        selected-fixture-id: "$.get('documents')[0].get('value', {}).get('id', {}).get('entityId') if $.get('documents') else None"
        similarity-score: "$.get('documents')[0].get('similarity') if $.get('documents') else None"

    # 11 verify-selected-fixture
    - type: "prompt"
      name: "verify-selected-fixture"
      description: "Verify the selected fixture."
      condition: "$.get('event_exists') is True and $.get('selected-fixture-exists') is True"
      connector:
        name: "machina-ai"
        command: "invoke_prompt"
        model: "gpt-4.1"
      inputs:
        scheduled-item-title: "$.get('title')"
        selected-fixture-title: "$.get('selected-fixture-title')"
        similarity-score: "$.get('similarity-score', 0)"
      outputs:
        is-match: "$.get('is-match')"

    # 13 load-market-by-fixture-nba-game
    - type: "connector"
      name: "load-market-by-fixture-nba-game"
      description: "Get a market by fixture from Sportingbet"
      condition: "$.get('event_exists') is True and $.get('selected-fixture-exists') is True"
      connector:
        name: "bwin"
        command: "get-offer/api/{sportId}/{country}/fixtures"
        command_attribute:
          country: "'br'"
          sportId: "'7'"
      inputs:
        fixtureIds: "$.get('selected-fixture-id')" 
      outputs:
        have_odds: "len($.get('items', [])[0].get('markets', [])) > 0"
        markets: "$.get('items', [])[0].get('markets', [])"
        bulk-markets: |
          [
            {
              **m,
              'title': f"$.(title) - {m.get('name', {}).get('shortText')}"
            }
            for m in $.get('items', [])[0].get('markets', [])
          ]

    # 14 research-nba-match-odds
    - type: "prompt"
      name: "research-nba-match-odds"
      description: "Research match odds."
      condition: "$.get('event_exists') is True and $.get('selected-fixture-exists') is True and $.get('have_odds') is True"
      connector:
        name: "machina-ai"
        command: "invoke_prompt"
        model: "gpt-4.1"
      inputs:
        title: "$.get('title')"
        markets: "$.get('bulk-markets')"
      outputs:
        research-match-odds: "$"
        research-match-odds-bulk: |
          [
            {
              'subject': '$.(title)',
              'text': c.get('content', ''),
              'title': f"$.(title) - {c.get('title', '')}",
              'metadata': {
                'event_code': '$.(event_code)',
                'language': 'en'
              }
            }
            for c in $.get('snippets', [])
          ]

    # 15 update-documents
    - type: "document"
      name: "update-documents-odds"
      description: "Update the documents."
      condition: "$.get('event_exists') is True and $.get('selected-fixture-exists') is True and $.get('have_odds') is True"
      config:
        action: "update"
        embed-vector: false
        force-update: true
      documents:
        market-odds: |
          {
            "execution": datetime.utcnow(),
            "content": $.get('research-match-odds'),
            "bulk-markets": $.get('bulk-markets'),
            "title": f"{$.get('title')} - Market Odds",
            "status": 'active'
          }
      metadata:
        event_code: "$.get('event_code')"
    
    # 16 update-snippets
    - type: "document"
      name: "update-snippets"
      condition: "$.get('event_exists') is True and $.get('have_odds') is True"
      description: "Update the snippets."
      config:
        action: "bulk-save"
        embed-vector: true
        force-update: true
      connector:
        name: "machina-ai"
        command: "invoke_embedding"
        model: "text-embedding-3-small"
      document_name: "content-snippet"
      documents:
        items: "$.get('parsed-items')"
      inputs:
        parsed-items: "$.get('research-match-odds-bulk')"

    - type: "document"
      name: "version-control-success-nba-game"
      description: "Update the events document version control."
      condition: "$.get('event_exists') is True and $.get('selected-fixture-exists') is True"
      config:
        action: "update"
        embed-vector: false
        force-update: true
      documents:
        nba-game: |
          {
            **$.get('event_selected'),
            'widget-match-embed': $.get('widget-match-embed'),
            'version_control': {
              **$.get('event_selected').get('version_control', {}),
              'game-fixture-id': $.get('selected-fixture-id'),
              'processing': False,
              'research_odds_count': $.get('odds_count', 0) + 1,
              'research_odds_status': 'processed',
              'updated': datetime.utcnow()
            }
          }
      metadata:
        event_code: "$.get('event_code')"

    - type: "document"
      name: "version-control-failure-nba-game"
      description: "Update the events document version control."
      condition: "$.get('event_exists') is True and $.get('selected-fixture-exists') is False"
      config:
        action: "update"
        embed-vector: false
        force-update: true
      documents:
        nba-game: |
          {
            **$.get('event_selected'),
            'version_control': {
              **$.get('event_selected').get('version_control', {}),
              'processing': False,
              'research_odds_failed': $.get('odds_count', 0) + 1,
              'updated': datetime.utcnow()
            }
          }
      metadata:
        event_code: "$.get('event_code')"
